import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.PointerInfo;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.nio.ByteBuffer;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class AudioData  {
	static long[] data = {2344920662270328836L, -238272665720344037L, 7313731692339373135L, 8278150392468121624L, -1846163535045032390L, 1540377315174227012L, -5583254125749301016L, 6575763558752632226L, -8165887050114107616L, 169029275268908152L, 2915953010483729052L, -1238810068843506191L, 3261532619951912429L, -4147215760629583497L, -8998665978628396330L, -1538635407806530653L, 3341228188542820038L, -3743538410497829018L, -4522216008189129318L, -768986745084221011L, 6935005435956069638L, 1250590073937983817L, -5702534213046688339L, -8017188809443083150L, -2320481005370384392L, 4608998746142177950L, 4186355030180935790L, -7082187707679571485L, -4545051891051100966L, 755222853380135922L, -1870279417060091013L, 7822599172314815863L, 4347327363042479015L, -5572325054888157492L, 1820310729599929212L, 7783245988037648799L, 8157168498352339925L, -8194481170868130676L, -8690632178193763634L, -4694044834328637855L, 2800314808397337393L, 6199451330915278290L, 3929732866928443300L, -1226541586825486491L, 3148284380604636220L, -2826510933353685993L, 6394183939291918130L, 1723415100049751219L, -2915524246625097793L, -2782107472018637669L, -5640230324297860019L, -1971353915288887013L, 9190145577334599572L, -3096905332810984504L, 1216899049242919435L, -7121924942074172248L, 459792429831330585L, 5994803799138310515L, 5289141836043158377L, -7447478042232549249L, -3828623401639421753L, -2342888464642467392L, 59806100910276980L, 8981222067155925931L, 3455852319063270491L, -849101864323896280L, 4021770625974224855L, 6106888544791181535L, 615399654325374838L, -7523341058788936881L, -2666035905595855986L, -8542661938450948367L, 1282122306273995220L, -4626048292406410698L, -1990489317307474873L, 6148614585316916703L, -655116166548699692L, 4933997238312794694L, -1033741327913753057L, 5666750668021443027L, -289646481032797919L, -7888828834189958824L, 6145641558556917535L, 2493118336539711840L, -4988722409550420104L, -1249826926369164726L, -2073879816065145802L, -2623786668414929603L, 1331829303957350738L, 3378863774008308051L, 3944765345824301652L, 4859185728698299433L, 626567762888401810L, -5143514936100278161L, 1387508762571591791L, 4577511014811900630L, 7769146537162448131L, 8015168317855766376L, -5993048216168303425L, -808512720645823364L, 4697234467342371045L, -6534487656837430138L, -9161585653845186481L, -4658435080450775999L, 5852284148311834044L, -986061696812869348L, 9166812122026248318L, -7471730774390871234L, 2657731119541955899L, 2440763369415950948L, -376586484995481553L, 3158567153471418787L, -4866455884165760167L, 1387434506862547716L, 1838491527923382930L, -4973475217456827556L, -8324868664462069268L, 6118980955632258237L, 6781241795815186077L, 157293258402172846L, -992480924607690253L, -1075335298887109185L, 4841406864641707271L, 7473423473059788189L, 3895478186637379426L, -3986914736918099107L, -3966682616059110718L, -7378842198319696935L, -7732066998731051219L, 1846630777336479740L, -3129583358092766281L, -7423039305757221541L, 9011638272235389596L, 628271119964741894L, 8626796598277751490L, -2427619512471426176L, -6541765712003101850L, -1481588268748735039L, 3889135055238321421L, -7873264547277999261L, 8153483099729719449L, -2621644401731460692L, -6364095871243852425L, 4960611873368408348L, 4601976161744356592L, -2140751305060581288L, -3851556785904247946L, -3770772706111121869L, 1314720373425186152L, 2342979878365356410L, -3469045828661331224L, 1951372014244723870L, 7142082858323981338L, -7820870234634281628L, -1671308810876186139L, -7489000030353545251L, 3067292070042246015L, -6198362712817121395L, -6066305903072912921L, -666239802846118813L, -694530370126398360L, -2201693342639646438L, -7490369207225947415L, 1007902072572089546L, 1056017494570149835L, -6907139589342150207L, -7463218926117519295L, -2682888328029919184L, -2286374949941102625L, -211841056254266404L, -7860714971347379149L, 3073408186428825338L, -6742197037412986924L, 5552596225508391498L, 6102370315138501468L, 5548788408397289071L, -6296044866453114120L, 4384637061221923342L, 1861900677060197562L, -6545585699528998701L, -8329789801885273638L, -4551028348766880114L, -1267674078612578508L, 472900143292570290L, -8938876471092722126L, 8984262784917884599L, -2700036053526296960L, -3709829536924880907L, 1895990381616035855L, 8616401772247479463L, 9077631207539541197L, 3275581478132349168L, 7620544458588866245L, 3100328342273778241L, 3334083968959305483L, -4008981833197043959L, -8616827649619527870L, 7812262913979575524L, 2351876658384664068L, 4528177268245189615L, 73050451929548612L, -1039957522657760376L, 5683503661925535209L, -7500901106409372474L, 250042306314555604L, 9057364488853655699L, 8676684418277810381L, 1067828982120078205L, 3776245929036067761L, 4393995638550986931L, 7080948188212345094L, 7567592007309284015L, 1834852303939399547L, -8772943952838684871L, -6686160520019584454L, -8906964839870708036L, -3480665111662642519L, 1097705105633105930L, -5007304808791470336L, 8383900371319854500L, -2679333870222198278L, 3326426078594274489L, 3354252722834391375L, -7740058825871406101L, -9135144352482961489L, 5998335903947492491L, -8600780278949657004L, -8039474660528268068L, 966642327670082906L, 4429737398627920211L, -1648573743928648011L, 1116578453103071983L, -6083127061986098328L, 4544767404978626965L, -3395177332453900070L, -3085851066341712409L, -4942864950508962393L, 3527407689329904584L, -3958003472277010723L, 1903459368762099639L, 2088690974777597673L, 2597485723605582293L, -559068551914442775L, -6509727870937400052L, 7592838533151822465L, -3480115567237936090L, 3208096210267144220L, -8194435953583027406L, 5535867709497970369L, -6189006281909139165L, 1920986974662244665L, 3899702794597274458L, -471247025385786771L, -6523453055270463464L, -3068659513385059816L, -7019156374328659746L};
	
	static double BASE_FREQ = 100.0;
	
	public static void main(String[] args) throws InterruptedException, LineUnavailableException {
		final int SAMPLING_RATE = 44000;            // Audio sampling rate
		final int SAMPLE_SIZE = 2;                  // Audio sample size in bytes

		SourceDataLine lineout;

		double fCyclePosition = 0;        

		AudioFormat format = new AudioFormat(SAMPLING_RATE, 16, 1, true, true);
		DataLine.Info sourceinfo = new DataLine.Info(SourceDataLine.class, format);

		if (!AudioSystem.isLineSupported(sourceinfo)){
			System.out.println("Line matching " + sourceinfo + " is not supported.");
			throw new LineUnavailableException();
		}

		lineout = (SourceDataLine)AudioSystem.getLine(sourceinfo);
		lineout.open(format);  
		lineout.start();
		

		ByteBuffer cBuf = ByteBuffer.allocate(lineout.getBufferSize());   

		// int ctSamplesTotal = SAMPLING_RATE*5;         // Output for roughly 5 seconds
		//while (ctSamplesTotal>0) {
		while (true) {
			double fCycleInc = 1.0/SAMPLING_RATE;
			cBuf.clear();
			int ctSamplesThisPass = lineout.available()/SAMPLE_SIZE;   
			for (int i=0; i < ctSamplesThisPass; i++) {
				cBuf.putShort((short)(func(fCyclePosition)*10000));

				fCyclePosition += fCycleInc;
			}
			lineout.write(cBuf.array(), 0, cBuf.position());            
			while (lineout.getBufferSize()/2 < lineout.available())   
				Thread.sleep(1);                                             
		}
		// line.drain();                                         
		// line.close();
	}
	

	static double func(double time) {
		//double sum = 0.0;
		double sum = 0.2*Math.sin(2.0*Math.PI*time*BASE_FREQ);
		long k = data[(int)Math.floor(time*5.0)];
		for (int i = 0; i < 8; i++) {
			int bit = (int)(k&0x1);
			k = k >> 1;
			if (bit == 1)
				sum += 0.02*Math.sin(2.0*Math.PI*time*BASE_FREQ*(i+2));
		}
		return sum;
	}
}
